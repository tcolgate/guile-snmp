#!@GUILE@ -s
!#

; This is intended to act as a snmp reporting shell
; and script interpreter

(define-module (snmp-report))

(use-modules (ice-9 threads))
(use-modules (ice-9 getopt-long))
(use-modules (ice-9 common-list))
(use-modules (srfi srfi-39))

;Create a nice environment for the users.
(use-modules (ice-9 session))
(use-modules (ice-9 history))

(use-modules (snmp reports))
(init-reports)

; Parse standard args

(define program-name    (make-parameter (basename (car (command-line)))))
(define program-version (make-parameter  "1"))
(define program-help    (make-parameter (string-append (program-name) ": version " (program-version) "\n")))
(define script-arguments (make-parameter #f))

(putenv (string-append "GUILE_HISTORY=" (getenv "HOME") "/." (program-name) "_history"))
(use-modules (ice-9 readline))
(activate-readline)

; process standard options
; srfi-37 hurt my brain. getopt will do nicely.
(let* ((option-spec '((version      (single-char #\V) (value #f))
                      (help         (single-char #\H) (value #f))
                      (snmp-version (single-char #\v) (value #t))
                      (host         (single-char #\h) (value #t))
                      (community    (single-char #\c) (value #t))
                      (context      (single-char #\C) (value #t))
                      (eval         (single-char #\e) (value #t))
                      (script       (single-char #\s) (value #t))))
       (options (getopt-long (program-arguments) option-spec))
       (help-wanted (option-ref options 'help #f))
       (version-wanted (option-ref options 'version #f))
       (snmp-version (option-ref options 'snmp-version #f))
       (host (option-ref options 'host #f))
       (community (option-ref options 'community #f))
       (context (option-ref options 'context #f))
       (evalstr (option-ref options 'eval #f))
       (script (option-ref options 'script #f))
       (scriptargs (option-ref options '() #f)))

  (if script
    (program-name (basename script)))

  (if (or version-wanted help-wanted)
     (begin
       (if version-wanted
         (format #t "~A version ~A~%" (program-name) (program-version)))
       (if help-wanted
           (format #t "\
~A [options] [arguments]:
  -V, --version            Display version
  -H, --help               Display this help
  -v, --snmp-version       The default SNMP Version to use (1, 2c or 3)
  -c, --community          The default SNMP community string
  -C, --context            The default SNMP comntext
  -h, --host               The default host (e.g. routername or routername:10161)
  -e, --eval               A expression to evaluate
  -s, --script             A script file to run
" (program-name)))
       (exit)))

  (if snmp-version
    (current-version snmp-version))
  (if host
    (current-peername host))
  (if community
    (current-community community))
  (if context
    (current-context context))

  (current-session (new-snmp-session))

  (if scriptargs
    (script-arguments scriptargs))

  (set-repl-prompt! (string-append (program-name) "> "))

  (if evalstr
    (format #t "~A~%" (eval-string evalstr)))

  (if script
    (load script))

  (if (not (or script evalstr))
    (scm-style-repl)))

; vim: ft=scheme:lisp:autoindent
