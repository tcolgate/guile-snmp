#!@GUILE@ -s
!#

(display (program-arguments))(newline)

; This is intended to act as a snmp reporting shell
; and script interpreter

(define-module (snmp-report))
(use-modules (ice-9 readline))

(use-modules (srfi srfi-37))
(use-modules (ice-9 threads))
(use-modules (ice-9 common-list))
(use-modules (ice-9 session))
(use-modules (ice-9 history))
(activate-readline)

(putenv "MIBS=all")
(use-modules (snmp reports))
(init-reports)


; Parse standard args

(define program-name    (make-parameter (basename (car (program-arguments)))))
(define program-version (make-parameter  "1"))
(define program-help    (make-parameter (string-append (program-name) ": version " (program-version) "\n")))

(set-repl-prompt! (string-append (program-name) "> "))

(define option:script #f)

; main
(args-fold (cdr (program-arguments))
  (let ((display-and-exit-proc (lambda (msg)
                                 (lambda (opt name arg)
                                   (display msg)(newline) (quit) (values))))
        (argproc (lambda(opt name arg snmpversion host community context script)
                    (values snmpversion host community context script))))
    (list (option '(#\v "snmp-version") #t #f argproc)
          (option '(#\h "host") #t #f argproc)
          (option '(#\c "community") #t #f argproc)
          (option '(#\C "context") #t #f argproc)
          (option '(#\s "script") #t #f argproc)
          (option '(#\V "version") #f #f (display-and-exit-proc (program-help)))
          (option '(#\H "help") #f #f (display-and-exit-proc (program-help)))))
  (lambda (opt name arg)
    (error (format "Unrecognized option `~A'" name)))
  (lambda(op)(display op)(newline)(values)))

(current-session (new-snmp-session))

(if option:script
  (load option:script)
  (scm-style-repl))

; vim: ft=scheme:lisp:autoindent
