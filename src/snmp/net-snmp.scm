;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 2.0.2
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.

(define-module (snmp net-snmp))
 

(eval-when (eval load compile)

  (use-modules (oop goops))
  (use-modules (srfi srfi-39))

  ; The module will hook these up with architecture specific
  ; srfi-4 routines
  (define empty-oidvec #f)
  (define oidvector #f)
  (define make-oidvector #f)
  (define oidvector? #f)
  (define oidvector-length #f)
  (define list->oidvector #f)
  (define oidvector->list #f)
  (define oidvector-ref #f)
  (define oidvector-set! #f)

  (define-class <oid> ()
		(_vec #:init-value empty-oidvec
		      #:init-keyword #:value))

  (define oid-translate (make-parameter #t))

    (define-method (display (this <oid>) port)
      (if (oid-translate)
        (let* ((node     (get-tree this (get-tree-head)))
               (basename (slot-ref node 'label))
               (diff     (- (oid-from-tree-node node) this)))
          (format port "~a~{.~d~}" basename (oid->list diff)))
        (format port "~{.~d~}" (oid->list this))))
  
    (define-method (write (this <oid>) port)
      (if (oid-translate)
       (let* ((node     (get-tree this (get-tree-head)))
               (basename (slot-ref node 'label))
               (diff     (- (oid-from-tree-node node) this)))
          (format port "#<oid: ~a~{.~d~}>#" basename (oid->list  diff)))
        (format port "#<oid: ~{.~d~}>#" (oid->list this))))

  (define-method (equal? (a <oid>) (b <oid>))
		 (equal? (slot-ref a '_vec) (slot-ref  b '_vec)))

  (define-method (equal? (a <oid>) b)
		 (equal? (slot-ref a '_vec) b))

  (define-method (equal? (a <oid>) b)
		 (equal? (slot-ref a '_vec) b))

  (define-method (equal? a (b <oid>))
		 (equal? a (slot-ref  b '_vec)))

  (define-method (oid->list (this <oid>))
		 (oidvector->list (slot-ref  this '_vec)))

  (define-method (list->oid this)
		 (make <oid> #:value (list->oidvector this)))

  (export 
    <oid> 
    oid-translate
    oidvector 
    make-oidvector 
    oidvector? 
    oidvector-length
    list->oidvector 
    oidvector->list
    oidvector-ref
    oidvector-set!
    list->oid 
    oid->list 
    empty-oidvec)

  (load-extension "libguile_snmp_net-snmp" "scm_init_snmp_net_snmp_module"))

(use-modules (oop goops))
(use-modules ((snmp net-snmp-primitive) :renamer (symbol-prefix-proc 'primitive:)))

;(define oid-from-varbind primitive:oid-from-varbind)
;(define guile-snmp-async-response primitive:guile-snmp-async-response)

(define-method (display (this primitive:<snmp-constant>) port)
  (format port "~a(~a)" (class-name (class-of this))(slot-ref this 'value)))
(define-method (write (this primitive:<snmp-constant>) port)
  (format port "~a(~a)" (class-name (class-of this))(slot-ref this 'value)))

;(define constant-classes (make-hash-table 20))
;(export constant-classes)

;(define-syntax define-constant-class
;  (syntax-rules ()
;    ((_ name)
;     (begin
;       (define-class name (<snmp-constant>))
;       (hash-set! constant-classes name (make-hash-table 32))  
;       (export name)))))
;
;(define-syntax define-constant
;  (syntax-rules ()
;    ((_ type name)
;     (begin
;       (define name (make type 
;                          #:value (local-ref (list  
;                          (string->symbol (string-append "primitive:_wrap_" 
;                                          (symbol->string (quote name))))))))
;       (hash-set! (hash-ref constant-classes type) (local-ref (list  
;                          (string->symbol (string-append "primitive:_wrap_" 
;                                          (symbol->string (quote name)))))
;							      ) name) 
;       (export name)))))


;(define-class <snmp-session> ()
;  (version #:allocation #:virtual
;   #:slot-ref (lambda (obj) (primitive:snmp-session-version-get obj))
;   #:slot-set! (lambda (obj value) (primitive:snmp-session-version-set obj value)))
;  (retries #:allocation #:virtual
;   #:slot-ref (lambda (obj) (primitive:snmp-session-retries-get obj))
;   #:slot-set! (lambda (obj value) (primitive:snmp-session-retries-set obj value)))
;  (timeout #:allocation #:virtual
;   #:slot-ref (lambda (obj) (primitive:snmp-session-timeout-get obj))
;   #:slot-set! (lambda (obj value) (primitive:snmp-session-timeout-set obj value)))
;  (subsession #:allocation #:virtual
;   #:slot-ref (lambda (obj) (primitive:snmp-session-subsession-get obj))
;   #:slot-set! (lambda (obj value) (primitive:snmp-session-subsession-set obj value)))
;  (next #:allocation #:virtual
;   #:slot-ref (lambda (obj) (primitive:snmp-session-next-get obj))
;   #:slot-set! (lambda (obj value) (primitive:snmp-session-next-set obj value)))
;  (peername #:allocation #:virtual
;   #:slot-ref (lambda (obj) (primitive:snmp-session-peername-get obj))
;   #:slot-set! (lambda (obj value) (primitive:snmp-session-peername-set obj value)))
;  (remote-port #:allocation #:virtual
;   #:slot-ref (lambda (obj) (primitive:snmp-session-remote-port-get obj))
;   #:slot-set! (lambda (obj value) (primitive:snmp-session-remote-port-set obj value)))
;  (localname #:allocation #:virtual
;   #:slot-ref (lambda (obj) (primitive:snmp-session-localname-get obj))
;   #:slot-set! (lambda (obj value) (primitive:snmp-session-localname-set obj value)))
;  (local-port #:allocation #:virtual
;   #:slot-ref (lambda (obj) (primitive:snmp-session-local-port-get obj))
;   #:slot-set! (lambda (obj value) (primitive:snmp-session-local-port-set obj value)))
;  (contextName #:allocation #:virtual
;   #:slot-ref (lambda (obj) (primitive:snmp-session-contextName-get obj))
;   #:slot-set! (lambda (obj value) (primitive:snmp-session-contextName-set obj value)))
;  #:new-function primitive:new-snmp-session
;)

;(define snmp-sess-init primitive:snmp-sess-init)
;(define snmp-open primitive:snmp-open)
;(define snmp-close primitive:snmp-close)
;(define snmp-close-sessions primitive:snmp-close-sessions)

(define-class primitive:<tree> ()
  ptr
  (label #:allocation #:virtual
   #:slot-ref primitive:tree-label-get
   #:slot-set! primitive:tree-label-set)
  #:name '<tree>)

(define-macro (re-export name)
  `(begin
     (define ,name ,(string->symbol
		       (string-append
		         "primitive:"
		         (symbol->string name))))
     (export ,name)))

(re-export <tree>)
(re-export <snmp-session>)
(re-export <values>)


(re-export init-mib)
(re-export init-snmp)
(re-export snmp-parse-oid)
(re-export get-tree)
(re-export get-tree-head)
(re-export oid-from-tree-node)
;

(re-export <snmp-constant>)
(re-export <snmp-version>)
(re-export SNMP-VERSION-1) 
(re-export SNMP-VERSION-2c) 
(re-export SNMP-VERSION-2u) 
(re-export SNMP-VERSION-3) 
(re-export SNMP-VERSION-2sec) 
(re-export SNMP-VERSION-2p) 
(re-export SNMP-VERSION-2star) 

#!
(re-export <snmp-msg>)
(re-export SNMP-MSG-GET)
(re-export SNMP-MSG-GETNEXT)
(re-export SNMP-MSG-RESPONSE)
(re-export SNMP-MSG-SET)
(re-export SNMP-MSG-TRAP)
(re-export SNMP-MSG-GETBULK)
(re-export SNMP-MSG-INFORM)
(re-export SNMP-MSG-TRAP2)
(re-export SNMP-MSG-REPORT)

(re-export <asn-type>)
(re-export ASN-BOOLEAN)
(re-export ASN-INTEGER)
(re-export ASN-BIT-STR)
(re-export ASN-NULL)
(re-export ASN-OBJECT-ID)
(re-export ASN-SEQUENCE)
(re-export ASN-SET)
(re-export ASN-OCTET-STR)
(re-export ASN-IPADDRESS)
(re-export ASN-COUNTER)
(re-export ASN-GAUGE)
(re-export ASN-UNSIGNED)
(re-export ASN-TIMETICKS)
(re-export ASN-OPAQUE)
(re-export ASN-NSAP)
(re-export ASN-COUNTER64)
(re-export ASN-UINTEGER)
(re-export ASN-FLOAT)
(re-export ASN-DOUBLE)
(re-export ASN-INTEGER64)
(re-export ASN-UNSIGNED64)

(re-export <snmp-status>)
(re-export SNMP-NOSUCHOBJECT)
(re-export SNMP-NOSUCHINSTANCE)
(re-export SNMP-ENDOFMIBVIEW)
(re-export STAT-SUCCESS)
(re-export STAT-ERROR)
(re-export STAT-TIMEOUT)

(re-export <snmp-err-status>)
(re-export SNMP-ERR-NOERROR)
(re-export SNMP-ERR-TOOBIG)
(re-export SNMP-ERR-NOSUCHNAME)
(re-export SNMP-ERR-BADVALUE)
(re-export SNMP-ERR-READONLY)
(re-export SNMP-ERR-GENERR)
(re-export SNMP-ERR-NOACCESS)
(re-export SNMP-ERR-WRONGTYPE)
(re-export SNMP-ERR-WRONGLENGTH)
(re-export SNMP-ERR-WRONGENCODING)
(re-export SNMP-ERR-WRONGVALUE)
(re-export SNMP-ERR-NOCREATION)
(re-export SNMP-ERR-INCONSISTENTVALUE)
(re-export SNMP-ERR-RESOURCEUNAVAILABLE)
(re-export SNMP-ERR-COMMITFAILED)
(re-export SNMP-ERR-UNDOFAILED)
(re-export SNMP-ERR-AUTHORIZATIONERROR)
(re-export SNMP-ERR-NOTWRITABLE)
(re-export SNMP-ERR-INCONSISTENTNAME)
!#

;(export 
;  <snmp-session> 
;  <oid>)
