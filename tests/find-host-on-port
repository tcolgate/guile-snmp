#!/usr/bin/guile -s
!#
;;-------------------------------------------------------------------
;; Copyright (C) 2009 Tristan Colgate 
;;
;; goal.scm - This is intended to be a complex example of the ideal
;; grammar intended for reporting.
;;
;;-------------------------------------------------------------------

;This is done purely to help us find our own module for purposes of (help)
(set! %load-path (cons "/usr/local/bin" %load-path))

(use-modules (srfi srfi-37))
(use-modules (ice-9 threads))
(use-modules (ice-9 format))
(use-modules (ice-9 common-list))
(use-modules (ice-9 session))
(putenv "MIBS=all")
(use-modules (snmp reports))
(init-reports)

;;; Commentary:
;;
;;  Useage: find-host-on-port [OPTIONS] switch port
;;    This command finds the IP associated with the hosts
;;  attached to a given switch and port. The port should
;;  be in the Cisco short port anme format (e.g. Gi1/1)
;;
;;; Code:

(define community "public")

; list of l3 routers, this has been removed for confidentiality 
; reasons
(define l3list (list 
                 "192.168.0.254"))

(define-macro (race-each func parargs)
  (let ((result (make-symbol "race-result-"))
        (result-ready (make-symbol "race-cv")))
         `(let* ((,result #f)
                 (,result-ready (make-condition-variable))
                 (junktex (make-mutex))
                 (junklock (lock-mutex junktex))
                 (dotask (lambda(val)
                           (let ((thisresult (,func val)))
                             (monitor
                               (set! ,result thisresult)
                               (signal-condition-variable ,result-ready)))))
                 (threads (map (lambda(x)(make-thread dotask x)) ,parargs)))
            (wait-condition-variable ,result-ready junktex )
      ;      (map (lambda(old-thread) (cancel-thread old-thread)) threads)
            ,result)))

(define (mac-as-oid mac)
  (let* ((len (string-length mac))
         (oid (make-u32vector len))
         (i 0))
    (string-for-each 
      (lambda(char)
        (u32vector-set! oid i (char->integer char))
        (set! i (+ i 1)))
      mac)
    oid))

(define (ipstr-to-str hexipaddr)
  (let* ((len (string-length hexipaddr))
         (iplist (list)))
    (string-for-each 
      (lambda(char)
        (set! iplist (append iplist  (list (number->string (char->integer char))))))
      hexipaddr)
    (string-join iplist ".")))



(define (find-host-on-port firstswitch targetname)
  " finds out an ip for any mac address on a given l2 switch port.
   The switch port must be give in the IFName format e.g. Gi1/0/1"
  (session #:host firstswitch #:community community
    (let* ((intname (walk ifName))
           (intid (iid intname)))
      (if (not (equal? (intname) targetname ))
        ((fail))
        (begin
          (let* ((intvlan (get-or-fail (+ vmVlan intid)))
                 (vlancomm (string-append community (string-append "@" (number->string (intvlan))))))
            (session #:host firstswitch #:community vlancomm
              (let* ((bportindex (walk dot1dBasePortIfIndex))
                     (bportid (iid bportindex)))
  	        (if (equal? (bportindex) (% 1 intid))
  		  (let* ((bportmac (walk dot1dTpFdbPort))
  			 (mac (iid bportmac)))
  		    (if (equal? (bportmac) (% 1 bportid))
  	              (session #:host (one-of l3list) #:community vlancomm
		  	(let* ((l3mac (walk ipNetToMediaPhysAddress ))
		  	       (l3macip (% 2 5 (iid l3mac))))
			  (if (equal? (mac-as-oid (l3mac)) mac)
			    (begin
      	                      (format #t "Switch: ~a Port: ~a ifIndex: ~a vlan: ~a mac: ~a ip: ~a  ~%" firstswitch (intname) intid (intvlan) mac l3macip)
			      (exit))
			    ((fail)))))
		       ((fail)))
		    ((fail)))
	          ((fail)))))))))))

; main
(let ((oplist (list)))
  (args-fold (cdr (program-arguments))
    (let ((display-and-exit-proc (lambda (msg) 
  				 (lambda (opt name arg) 
  				   (display msg)(newline) (quit) (values)))))
      (list (option '(#\v "version") #f #f 
		  (display-and-exit-proc "find-host: version 0.1\n"))
      	    (option '(#\h "help") #f #f 
		  (display-and-exit-proc "Usage: find-host hostname ..."))))
    (lambda (opt name arg)
      (error (format "Unrecognized option `~A'" name)))
    (lambda(op)(string-split op #\:)(newline)(values op)))

; vim: ft=scheme:lisp:autoindent

